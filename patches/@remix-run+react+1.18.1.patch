diff --git a/node_modules/@remix-run/react/dist/browser.d.ts b/node_modules/@remix-run/react/dist/browser.d.ts
index da399bb..e2bce2b 100644
--- a/node_modules/@remix-run/react/dist/browser.d.ts
+++ b/node_modules/@remix-run/react/dist/browser.d.ts
@@ -21,6 +21,7 @@ declare global {
     };
 }
 export interface RemixBrowserProps {
+  basename?: string
 }
 declare global {
     interface ImportMeta {
diff --git a/node_modules/@remix-run/react/dist/browser.js b/node_modules/@remix-run/react/dist/browser.js
index ef0da47..de100b8 100644
--- a/node_modules/@remix-run/react/dist/browser.js
+++ b/node_modules/@remix-run/react/dist/browser.js
@@ -51,8 +51,9 @@ let router;
  * that was received from the server.
  */
 function RemixBrowser(_props) {
+  const basename = _props.basename || '';
   if (!router) {
-    let routes$1 = routes.createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);
+    let routes$1 = routes.createClientRoutes(basename, window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);
     let hydrationData = window.__remixContext.state;
     if (hydrationData && hydrationData.errors) {
       hydrationData = {
@@ -61,6 +62,7 @@ function RemixBrowser(_props) {
       };
     }
     router = reactRouterDom.createBrowserRouter(routes$1, {
+      ...(_props.basename ? {basename: _props.basename} : undefined),
       hydrationData,
       future: {
         // Pass through the Remix future flag to avoid a v1 breaking change in
@@ -79,8 +81,11 @@ function RemixBrowser(_props) {
     // us to a new URL.  Avoid comparing search params because of CDNs which
     // can be configured to ignore certain params and only pathname is relevant
     // towards determining the route matches.
-    let initialPathname = window.__remixContext.url;
+    let basePath = _props.basename && _props.basename !== '/' ? _props.basename : '';
+    let initialPathname = window.__remixContext.url === "/" ? basePath : basePath + window.__remixContext.url;
+    initialPathname = initialPathname.endsWith("/") ? initialPathname : `${initialPathname}/`;
     let hydratedPathname = window.location.pathname;
+    hydratedPathname = hydratedPathname.endsWith("/") ? hydratedPathname : `${hydratedPathname}/`;
     if (initialPathname !== hydratedPathname) {
       let errorMsg = `Initial URL (${initialPathname}) does not match URL at time of hydration ` + `(${hydratedPathname}), reloading page...`;
       console.error(errorMsg);
@@ -102,6 +107,7 @@ function RemixBrowser(_props) {
   // out of there
   return /*#__PURE__*/React__namespace.createElement(components.RemixContext.Provider, {
     value: {
+      basename: _props.basename || '',
       manifest: window.__remixManifest,
       routeModules: window.__remixRouteModules,
       future: window.__remixContext.future
diff --git a/node_modules/@remix-run/react/dist/components.js b/node_modules/@remix-run/react/dist/components.js
index c1e158e..98f63c6 100644
--- a/node_modules/@remix-run/react/dist/components.js
+++ b/node_modules/@remix-run/react/dist/components.js
@@ -280,6 +280,7 @@ let fetcherSubmissionWarning = "⚠️ REMIX FUTURE CHANGE : `fetcher.submission
  */
 function Links() {
   let {
+    basename,
     manifest,
     routeModules
   } = useRemixContext();
@@ -295,6 +296,9 @@ function Links() {
     }
   }, [links$1]);
   return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, links$1.map(link => {
+    if (link.href.startsWith('/build/')) {
+      link.href = basename + link.href;
+    }
     if (links.isPageLinkDescriptor(link)) {
       return /*#__PURE__*/React__namespace.createElement(PrefetchPageLinks, _rollupPluginBabelHelpers["extends"]({
         key: link.page
@@ -381,6 +385,7 @@ function PrefetchPageLinksImpl({
 }) {
   let location = reactRouterDom.useLocation();
   let {
+    basename,
     manifest
   } = useRemixContext();
   let {
@@ -398,11 +403,11 @@ function PrefetchPageLinksImpl({
     key: href,
     rel: "prefetch",
     as: "fetch",
-    href: href
+    href: basename + href
   }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React__namespace.createElement("link", _rollupPluginBabelHelpers["extends"]({
     key: href,
     rel: "modulepreload",
-    href: href
+    href: basename + href
   }, linkProps))), styleLinks.map(link =>
   /*#__PURE__*/
   // these don't spread `linkProps` because they are full link descriptors
@@ -648,6 +653,7 @@ let isHydrated = false;
  */
 function Scripts(props) {
   let {
+    basename,
     manifest,
     serverHandoffString,
     abortDelay
@@ -714,11 +720,11 @@ function Scripts(props) {
       }).join(",\n");
       return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
     }).join("\n") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "");
-    let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
-${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join("\n")}
+    let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(basename+manifest.hmr.runtime)};` : ""}import ${JSON.stringify(basename+manifest.url)};
+    ${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(basename + manifest.routes[match.route.id].module)};`).join("\n")}
 window.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}};
 
-import(${JSON.stringify(manifest.entry.module)});`;
+import(${JSON.stringify(basename + manifest.entry.module)});`;
     return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("script", _rollupPluginBabelHelpers["extends"]({}, props, {
       suppressHydrationWarning: true,
       dangerouslySetInnerHTML: markup.createHtml(contextScript),
@@ -760,12 +766,12 @@ import(${JSON.stringify(manifest.entry.module)});`;
   let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);
   return isHydrated ? null : /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("link", {
     rel: "modulepreload",
-    href: manifest.entry.module,
+    href: basename + manifest.entry.module,
     crossOrigin: props.crossOrigin
   }), dedupe(preloads).map(path => /*#__PURE__*/React__namespace.createElement("link", {
     key: path,
     rel: "modulepreload",
-    href: path,
+    href: basename + path,
     crossOrigin: props.crossOrigin
   })), initialScripts, deferredScripts);
 }
@@ -840,13 +846,14 @@ function dedupe(array) {
 
 function useMatches() {
   let {
+    basename,
     routeModules
   } = useRemixContext();
   let matches = reactRouterDom.useMatches();
   return React__namespace.useMemo(() => matches.map(match => {
     let remixMatch = {
       id: match.id,
-      pathname: match.pathname,
+      pathname: basename + match.pathname,
       params: match.params,
       data: match.data,
       // Need to grab handle here since we don't have it at client-side route
diff --git a/node_modules/@remix-run/react/dist/esm/browser.js b/node_modules/@remix-run/react/dist/esm/browser.js
index 889e431..62e6f7a 100644
--- a/node_modules/@remix-run/react/dist/esm/browser.js
+++ b/node_modules/@remix-run/react/dist/esm/browser.js
@@ -51,7 +51,7 @@ if (import.meta && import.meta.hot) {
     }))).filter(Boolean)));
     Object.assign(window.__remixRouteModules, newRouteModules);
     // Create new routes
-    let routes = createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, assetsManifest.routes, window.__remixRouteModules, window.__remixContext.future);
+    let routes = createClientRoutesWithHMRRevalidationOptOut(undefined, needsRevalidation, assetsManifest.routes, window.__remixRouteModules, window.__remixContext.future);
 
     // This is temporary API and will be more granular before release
     router._internalSetRoutes(routes);
@@ -82,8 +82,9 @@ if (import.meta && import.meta.hot) {
  * that was received from the server.
  */
 function RemixBrowser(_props) {
+  const basename = _props.basename || '';
   if (!router) {
-    let routes = createClientRoutes(window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);
+    let routes = createClientRoutes(basename, window.__remixManifest.routes, window.__remixRouteModules, window.__remixContext.future);
     let hydrationData = window.__remixContext.state;
     if (hydrationData && hydrationData.errors) {
       hydrationData = {
@@ -92,6 +93,7 @@ function RemixBrowser(_props) {
       };
     }
     router = createBrowserRouter(routes, {
+      ...(_props.basename ? {basename: _props.basename} : undefined),
       hydrationData,
       future: {
         // Pass through the Remix future flag to avoid a v1 breaking change in
@@ -110,8 +112,11 @@ function RemixBrowser(_props) {
     // us to a new URL.  Avoid comparing search params because of CDNs which
     // can be configured to ignore certain params and only pathname is relevant
     // towards determining the route matches.
-    let initialPathname = window.__remixContext.url;
+    let basePath = _props.basename && _props.basename !== '/' ? _props.basename : '';
+    let initialPathname = window.__remixContext.url === "/" ? basePath : basePath + window.__remixContext.url;
+    initialPathname = initialPathname.endsWith("/") ? initialPathname : `${initialPathname}/`;
     let hydratedPathname = window.location.pathname;
+    hydratedPathname = hydratedPathname.endsWith("/") ? hydratedPathname : `${hydratedPathname}/`;
     if (initialPathname !== hydratedPathname) {
       let errorMsg = `Initial URL (${initialPathname}) does not match URL at time of hydration ` + `(${hydratedPathname}), reloading page...`;
       console.error(errorMsg);
@@ -133,6 +138,7 @@ function RemixBrowser(_props) {
   // out of there
   return /*#__PURE__*/React.createElement(RemixContext.Provider, {
     value: {
+      basename: _props.basename || '',
       manifest: window.__remixManifest,
       routeModules: window.__remixRouteModules,
       future: window.__remixContext.future
diff --git a/node_modules/@remix-run/react/dist/esm/components.js b/node_modules/@remix-run/react/dist/esm/components.js
index 366a7e5..8363464 100644
--- a/node_modules/@remix-run/react/dist/esm/components.js
+++ b/node_modules/@remix-run/react/dist/esm/components.js
@@ -256,6 +256,7 @@ let fetcherSubmissionWarning = "⚠️ REMIX FUTURE CHANGE : `fetcher.submission
  */
 function Links() {
   let {
+    basename,
     manifest,
     routeModules
   } = useRemixContext();
@@ -271,6 +272,9 @@ function Links() {
     }
   }, [links]);
   return /*#__PURE__*/React.createElement(React.Fragment, null, links.map(link => {
+    if (link.href.startsWith('/build/')) {
+      link.href = basename + link.href;
+    }
     if (isPageLinkDescriptor(link)) {
       return /*#__PURE__*/React.createElement(PrefetchPageLinks, _extends({
         key: link.page
@@ -357,6 +361,7 @@ function PrefetchPageLinksImpl({
 }) {
   let location = useLocation();
   let {
+    basename,
     manifest
   } = useRemixContext();
   let {
@@ -374,11 +379,11 @@ function PrefetchPageLinksImpl({
     key: href,
     rel: "prefetch",
     as: "fetch",
-    href: href
+    href: basename + href
   }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React.createElement("link", _extends({
     key: href,
     rel: "modulepreload",
-    href: href
+    href: basename + href
   }, linkProps))), styleLinks.map(link =>
   /*#__PURE__*/
   // these don't spread `linkProps` because they are full link descriptors
@@ -624,6 +629,7 @@ let isHydrated = false;
  */
 function Scripts(props) {
   let {
+    basename,
     manifest,
     serverHandoffString,
     abortDelay
@@ -690,11 +696,11 @@ function Scripts(props) {
       }).join(",\n");
       return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;
     }).join("\n") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "");
-    let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
-${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join("\n")}
+    let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(basename+manifest.hmr.runtime)};` : ""}import ${JSON.stringify(basename+manifest.url)};
+    ${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(basename+manifest.routes[match.route.id].module)};`).join("\n")}
 window.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}};
 
-import(${JSON.stringify(manifest.entry.module)});`;
+import(${JSON.stringify(basename+manifest.entry.module)});`;
     return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("script", _extends({}, props, {
       suppressHydrationWarning: true,
       dangerouslySetInnerHTML: createHtml(contextScript),
@@ -736,12 +742,12 @@ import(${JSON.stringify(manifest.entry.module)});`;
   let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);
   return isHydrated ? null : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("link", {
     rel: "modulepreload",
-    href: manifest.entry.module,
+    href: basename + manifest.entry.module,
     crossOrigin: props.crossOrigin
   }), dedupe(preloads).map(path => /*#__PURE__*/React.createElement("link", {
     key: path,
     rel: "modulepreload",
-    href: path,
+    href: basename + path,
     crossOrigin: props.crossOrigin
   })), initialScripts, deferredScripts);
 }
@@ -816,13 +822,14 @@ function dedupe(array) {
 
 function useMatches() {
   let {
+    basename,
     routeModules
   } = useRemixContext();
   let matches = useMatches$1();
   return React.useMemo(() => matches.map(match => {
     let remixMatch = {
       id: match.id,
-      pathname: match.pathname,
+      pathname: basename + match.pathname,
       params: match.params,
       data: match.data,
       // Need to grab handle here since we don't have it at client-side route
diff --git a/node_modules/@remix-run/react/dist/esm/links.js b/node_modules/@remix-run/react/dist/esm/links.js
index 3ca8cf3..db1057c 100644
--- a/node_modules/@remix-run/react/dist/esm/links.js
+++ b/node_modules/@remix-run/react/dist/esm/links.js
@@ -31,7 +31,7 @@ function getLinksForMatches(matches, routeModules, manifest) {
   let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
   return dedupe(descriptors, preloads);
 }
-async function prefetchStyleLinks(routeModule) {
+async function prefetchStyleLinks(basename, routeModule) {
   if (!routeModule.links) return;
   let descriptors = routeModule.links();
   if (!descriptors) return;
@@ -48,9 +48,9 @@ async function prefetchStyleLinks(routeModule) {
 
   // don't block for non-matching media queries
   let matchingLinks = styleLinks.filter(link => !link.media || window.matchMedia(link.media).matches);
-  await Promise.all(matchingLinks.map(prefetchStyleLink));
+  await Promise.all(matchingLinks.map((descriptor) => prefetchStyleLink(basename, descriptor)));
 }
-async function prefetchStyleLink(descriptor) {
+async function prefetchStyleLink(basename, descriptor) {
   return new Promise(resolve => {
     let link = document.createElement("link");
     Object.assign(link, descriptor);
@@ -70,6 +70,9 @@ async function prefetchStyleLink(descriptor) {
       removeLink();
       resolve();
     };
+    const ogUrl = new URL(link.href);
+    ogUrl.pathname = basename + ogUrl.pathname;
+    link.href = ogUrl.toString();
     document.head.appendChild(link);
   });
 }
diff --git a/node_modules/@remix-run/react/dist/esm/routes.js b/node_modules/@remix-run/react/dist/esm/routes.js
index 366a0fe..7ba6c6d 100644
--- a/node_modules/@remix-run/react/dist/esm/routes.js
+++ b/node_modules/@remix-run/react/dist/esm/routes.js
@@ -57,10 +57,10 @@ function createServerRoutes(manifest, routeModules, future, parentId = "", route
     return dataRoute;
   });
 }
-function createClientRoutesWithHMRRevalidationOptOut(needsRevalidation, manifest, routeModulesCache, future) {
-  return createClientRoutes(manifest, routeModulesCache, future, "", groupRoutesByParentId(manifest), needsRevalidation);
+function createClientRoutesWithHMRRevalidationOptOut(basename, needsRevalidation, manifest, routeModulesCache, future) {
+  return createClientRoutes(basename, manifest, routeModulesCache, future, "", groupRoutesByParentId(manifest), needsRevalidation);
 }
-function createClientRoutes(manifest, routeModulesCache, future, parentId = "", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {
+function createClientRoutes(basename, manifest, routeModulesCache, future, parentId = "", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {
   return (routesByParentId[parentId] || []).map(route => {
     let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary;
     let dataRoute = {
@@ -77,11 +77,11 @@ function createClientRoutes(manifest, routeModulesCache, future, parentId = "",
       // handle gets added in via useMatches since we aren't guaranteed to
       // have the route module available here
       handle: undefined,
-      loader: createDataFunction(route, routeModulesCache, false),
-      action: createDataFunction(route, routeModulesCache, true),
+      loader: createDataFunction(basename, route, routeModulesCache, false),
+      action: createDataFunction(basename, route, routeModulesCache, true),
       shouldRevalidate: createShouldRevalidate(route, routeModulesCache, needsRevalidation)
     };
-    let children = createClientRoutes(manifest, routeModulesCache, future, route.id, routesByParentId, needsRevalidation);
+    let children = createClientRoutes(basename, manifest, routeModulesCache, future, route.id, routesByParentId, needsRevalidation);
     if (children.length > 0) dataRoute.children = children;
     return dataRoute;
   });
@@ -105,16 +105,16 @@ function createShouldRevalidate(route, routeModules, needsRevalidation) {
     return arg.defaultShouldRevalidate;
   };
 }
-async function loadRouteModuleWithBlockingLinks(route, routeModules) {
+async function loadRouteModuleWithBlockingLinks(basename, route, routeModules) {
   let routeModule = await loadRouteModule(route, routeModules);
-  await prefetchStyleLinks(routeModule);
+  await prefetchStyleLinks(basename, routeModule);
   return routeModule;
 }
-function createDataFunction(route, routeModules, isAction) {
+function createDataFunction(basename, route, routeModules, isAction) {
   return async ({
     request
   }) => {
-    let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules);
+    let routeModulePromise = loadRouteModuleWithBlockingLinks(basename, route, routeModules);
     try {
       if (isAction && !route.hasAction) {
         let msg = `Route "${route.id}" does not have an action, but you are trying ` + `to submit to it. To fix this, please add an \`action\` function to the route`;
diff --git a/node_modules/@remix-run/react/dist/esm/server.js b/node_modules/@remix-run/react/dist/esm/server.js
index 8afd8e3..9d664d0 100644
--- a/node_modules/@remix-run/react/dist/esm/server.js
+++ b/node_modules/@remix-run/react/dist/esm/server.js
@@ -22,7 +22,8 @@ import { createServerRoutes } from './routes.js';
 function RemixServer({
   context,
   url,
-  abortDelay
+  abortDelay,
+  basename
 }) {
   if (typeof url === "string") {
     url = new URL(url);
@@ -36,6 +37,7 @@ function RemixServer({
   let router = createStaticRouter(routes, context.staticHandlerContext);
   return /*#__PURE__*/React.createElement(RemixContext.Provider, {
     value: {
+      basename: basename || '',
       manifest,
       routeModules,
       serverHandoffString,
diff --git a/node_modules/@remix-run/react/dist/links.d.ts b/node_modules/@remix-run/react/dist/links.d.ts
index 8d075b7..bd81590 100644
--- a/node_modules/@remix-run/react/dist/links.d.ts
+++ b/node_modules/@remix-run/react/dist/links.d.ts
@@ -119,7 +119,7 @@ export type LinkDescriptor = HtmlLinkDescriptor | PrefetchPageDescriptor;
  * loaded already.
  */
 export declare function getLinksForMatches(matches: AgnosticDataRouteMatch[], routeModules: RouteModules, manifest: AssetsManifest): LinkDescriptor[];
-export declare function prefetchStyleLinks(routeModule: RouteModule): Promise<void>;
+export declare function prefetchStyleLinks(basename: string, routeModule: RouteModule): Promise<void>;
 export declare function isPageLinkDescriptor(object: any): object is PrefetchPageDescriptor;
 export declare function isHtmlLinkDescriptor(object: any): object is HtmlLinkDescriptor;
 export declare function getStylesheetPrefetchLinks(matches: AgnosticDataRouteMatch[], manifest: AssetsManifest, routeModules: RouteModules): Promise<HtmlLinkDescriptor[]>;
diff --git a/node_modules/@remix-run/react/dist/links.js b/node_modules/@remix-run/react/dist/links.js
index d692805..178944f 100644
--- a/node_modules/@remix-run/react/dist/links.js
+++ b/node_modules/@remix-run/react/dist/links.js
@@ -35,7 +35,7 @@ function getLinksForMatches(matches, routeModules, manifest) {
   let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);
   return dedupe(descriptors, preloads);
 }
-async function prefetchStyleLinks(routeModule) {
+async function prefetchStyleLinks(basename, routeModule) {
   if (!routeModule.links) return;
   let descriptors = routeModule.links();
   if (!descriptors) return;
@@ -52,9 +52,9 @@ async function prefetchStyleLinks(routeModule) {
 
   // don't block for non-matching media queries
   let matchingLinks = styleLinks.filter(link => !link.media || window.matchMedia(link.media).matches);
-  await Promise.all(matchingLinks.map(prefetchStyleLink));
+  await Promise.all(matchingLinks.map(descriptor => prefetchStyleLink(basename, descriptor)));
 }
-async function prefetchStyleLink(descriptor) {
+async function prefetchStyleLink(basename, descriptor) {
   return new Promise(resolve => {
     let link = document.createElement("link");
     Object.assign(link, descriptor);
@@ -74,6 +74,9 @@ async function prefetchStyleLink(descriptor) {
       removeLink();
       resolve();
     };
+    const ogUrl = new URL(link.href);
+    ogUrl.pathname = basename + ogUrl.pathname;
+    link.href = ogUrl.toString();
     document.head.appendChild(link);
   });
 }
diff --git a/node_modules/@remix-run/react/dist/routes.js b/node_modules/@remix-run/react/dist/routes.js
index 938cbf4..d215274 100644
--- a/node_modules/@remix-run/react/dist/routes.js
+++ b/node_modules/@remix-run/react/dist/routes.js
@@ -81,7 +81,7 @@ function createServerRoutes(manifest, routeModules, future, parentId = "", route
     return dataRoute;
   });
 }
-function createClientRoutes(manifest, routeModulesCache, future, parentId = "", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {
+function createClientRoutes(basename, manifest, routeModulesCache, future, parentId = "", routesByParentId = groupRoutesByParentId(manifest), needsRevalidation) {
   return (routesByParentId[parentId] || []).map(route => {
     let hasErrorBoundary = future.v2_errorBoundary === true ? route.id === "root" || route.hasErrorBoundary : route.id === "root" || route.hasCatchBoundary || route.hasErrorBoundary;
     let dataRoute = {
@@ -98,11 +98,11 @@ function createClientRoutes(manifest, routeModulesCache, future, parentId = "",
       // handle gets added in via useMatches since we aren't guaranteed to
       // have the route module available here
       handle: undefined,
-      loader: createDataFunction(route, routeModulesCache, false),
-      action: createDataFunction(route, routeModulesCache, true),
+      loader: createDataFunction(basename, route, routeModulesCache, false),
+      action: createDataFunction(basename, route, routeModulesCache, true),
       shouldRevalidate: createShouldRevalidate(route, routeModulesCache, needsRevalidation)
     };
-    let children = createClientRoutes(manifest, routeModulesCache, future, route.id, routesByParentId, needsRevalidation);
+    let children = createClientRoutes(basename, manifest, routeModulesCache, future, route.id, routesByParentId, needsRevalidation);
     if (children.length > 0) dataRoute.children = children;
     return dataRoute;
   });
@@ -126,16 +126,16 @@ function createShouldRevalidate(route, routeModules, needsRevalidation) {
     return arg.defaultShouldRevalidate;
   };
 }
-async function loadRouteModuleWithBlockingLinks(route, routeModules$1) {
+async function loadRouteModuleWithBlockingLinks(basename, route, routeModules$1) {
   let routeModule = await routeModules.loadRouteModule(route, routeModules$1);
-  await links.prefetchStyleLinks(routeModule);
+  await links.prefetchStyleLinks(basename, routeModule);
   return routeModule;
 }
-function createDataFunction(route, routeModules, isAction) {
+function createDataFunction(basename, route, routeModules, isAction) {
   return async ({
     request
   }) => {
-    let routeModulePromise = loadRouteModuleWithBlockingLinks(route, routeModules);
+    let routeModulePromise = loadRouteModuleWithBlockingLinks(basename, route, routeModules);
     try {
       if (isAction && !route.hasAction) {
         let msg = `Route "${route.id}" does not have an action, but you are trying ` + `to submit to it. To fix this, please add an \`action\` function to the route`;
diff --git a/node_modules/@remix-run/react/dist/server.d.ts b/node_modules/@remix-run/react/dist/server.d.ts
index b4ce34e..629954b 100644
--- a/node_modules/@remix-run/react/dist/server.d.ts
+++ b/node_modules/@remix-run/react/dist/server.d.ts
@@ -1,6 +1,7 @@
 import type { ReactElement } from "react";
 import type { EntryContext } from "./entry";
 export interface RemixServerProps {
+    basename?: string;
     context: EntryContext;
     url: string | URL;
     abortDelay?: number;
diff --git a/node_modules/@remix-run/react/dist/server.js b/node_modules/@remix-run/react/dist/server.js
index 44e4067..2df1316 100644
--- a/node_modules/@remix-run/react/dist/server.js
+++ b/node_modules/@remix-run/react/dist/server.js
@@ -46,7 +46,8 @@ var React__namespace = /*#__PURE__*/_interopNamespace(React);
 function RemixServer({
   context,
   url,
-  abortDelay
+  abortDelay,
+  basename
 }) {
   if (typeof url === "string") {
     url = new URL(url);
@@ -60,6 +61,7 @@ function RemixServer({
   let router = server.createStaticRouter(routes$1, context.staticHandlerContext);
   return /*#__PURE__*/React__namespace.createElement(components.RemixContext.Provider, {
     value: {
+      basename: basename || '',
       manifest,
       routeModules,
       serverHandoffString,
